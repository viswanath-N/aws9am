EC2 : Elastic 		Compute 			Cloud
	ScaleIN		CPU, Memory, 			AWS
	Scaleout	Storage, Network, 
			application



On-Demand ec2 instances : Unpredictable workloads / usecases.. If you want to test your applciation.. Temporary usage.. 
Pricing : /sec  or /hr basis we will get charged..  (with min of 60 Sec billing)

Reserved ec2 Instances : Predictable workload/ use cases.. Long time runs with AWS..
1 Yr / 3Yrs.. 
	--> Standard RI : We cannot change the instance configuration.. 
	--> Convertable RI : We can change the config.. 
	--> Scheduled RI : Repeated / persistant requests.. 

Pricing : Full Upfront : Pay 100% and get your instance.. 
	  Partial Upfront : Pay 30-50% now.. Remaining Monthly basis with reduced hr 				price
	  No Upfront : No need to pay anything.. Pay everything monthly basis..

Spot Instances : We can bid against the AWS price. If our quoted price is Equal to aws or greater than aws, we will get the instance.. 
--> If we have flexible start / stop time for our application.. 
--> If price increased AWS terminates the instance.
--> High configuration instances we will get at low cost.

t2.large : 1 $/Hr... You can bit against aws price.. 0.50$/hr fromdate/todate..

--> Spot Fleet
--> Pricing history

Free Tier : 750 Hrs/ Month On-Demand ec2 instances...

_______________________________________________________________________________________

D: 12/05/2020

Windows Instance Launch and connectivity: 

Step 1: Choose an Amazon Machine Image (AMI)	:	Required OS : Windows 2016
AMI : Template of an OS, Applciation, softwares to run the instance.

Step 2 : Choose an Instance Type : Selecting the configuration (vCPU, Memory, Network Perf)

General Purpose 	: t2, t3, m4, m5	: t2.micro (Free tier)
Memory Optimised 	: r4, r5, r5ad , x1
Storage Optimized 	: d2, i2, i3
Compute Optimized 	: c4, c5, c4n, c5d	: (c5.xlarge 4CPU 8GBRAM) 
						  (c4.2xlarge 8vCPU 15GB RAM)
GPU Instances 		: P4, G2
FPGA (Field programable Gateway Array) : f1
ML ASIC (Application Specific Integrated Circuit) : inf1


Step 3: Configure Instance Details

No of INstance 			: 1
Shutdown behavior 		: Stop / Terminate
Enable termination protection 	: Yes (Protect against accidental termination)

Step 4: Add Storage 	: HDD

Step 5: Add Tags 	: Provide your metadata

Step 6: Configure Security Group 

Windows :  RDP : 3389 : MyIP
Linux : SSH : 22 : 

Source :  	Everywhere/anywhere : 0.0.0.0/0
		MyIP : Currently connected network IP : 
		Custom : Custom Network IPs

Step 7: Review and Launch.. 

Username : Administrator
password : Autogenerates Using Public Key and Private Key  (.pem file)

Public Key : AWS Stores this : Encrypt  
Private Key : We will get this private key : Decrypt  : .PEM


AWS ENvironment : 
We need to use "PUBLIC IP / DNS", Not "private IP"
Public IP : Unique across the globe.


Connect : 
1. open "Run" --> mstsc
2. click on "start" --> "Remote Desktop Connection"
3. Slect instance --> Action --> Connect --> Download Remote Desktop file.


Task : 

Every windows instance comes with 2 RDP Licenses.. 

ALong with Administror... Create another user "yourname" --> Provide "Local Admin Rights"
and Provide "RDP Permissions".

Login as "Yourname" to ec2 instance.

________________________________________________________________________________________

D: 13/05/2020

ec2 instance isolation diagram: 
--> AWS uses highly customized XEN hypervisor.


Shared Hardware Tenancy : Underlying h/w shares with multiple AWS customers.
Dedicated Tenancy : Dedicated hardware for your AWS account. Underlying h/w will share with any other customers.

--> Dedicated Instance : H/w for one instance.. 
--> Dedicated Host : H/w for multiple instances.. We can view underlying ports/licensisng parts..  We will get more visualisation on how instances are launched on h/w.

Dedicated cost us very high pricing..
_________



2 Root Device types : 
--> Instance Store Volumes
--> EBS (Elastic Block Storage) volumes

Instance Store Volumes :
--> We cannot stop/start the instance. 
--> If underlying hardware failure happens, we will loss all the data. 
--> We can reboot, if required.

EBS : 
--> Dedicated storage service for ec2 instances.
--> We can perform stop/start no. of times.
--> If underlying instance h/w failures won't effect our instance.

IOPS : Input and Output Operations per second..

5 Types of EBS VOlumes. Out of 5, to run os, only 3 supports.. "Root Volumes"

root: 
--> general Purpose SSD : GP2 : Min. 1 Gb, Max 16 TB.. Boot volumes, low latency interactive applications on dev/test env.. 
IOPS : 16,000 Max.. 1 Gb = 3 IOPS.. with min of 100

--> Provisioned iops SSD : io1 : Min. 4 Gb, Max 16 TB.. Highest performance sSD.. NoSQL, Relational DB, I/O intensive application, If you need more than 10k iops.. 
Max IOPS : 64,000.. 1 Gb = 50 IOPS.. But we have a choice to specify required iops count.

--> Magnetic : Standard : Min. 1 Gb, Max 1 TB.. Less frequenly accssed data.. Lowest cost storage option.. IOPS : N/A

Additional:
--> Throughput optimised HDD : st1 : Min 500Gb, Max:16TB, Low cost freq accesed workloads, BigData warehhousing, Log Processing.. 

--> Cold HDD : sc1 : Min 500Gb, Max:16TB, Lowest cost in-freq accesed workloads, COlder data required fewer scans /day.. 


"Free Tier : 30GB Standard / Magnetic.. "


Task : Launch an ec2 instance in "ap-south-1a" with only root volume.. Create a 1 Gb Volume and associate with ec2 instance and make it available... 

Task 2 : Write some data in 1 gb volume... Increase this 1gb volume size to 2 gb.. 

Task 3 : Launch another ec2 instance in "ap-south-1a", and Detach 2gb volume from task2 instance and attach it to newly launched ec2 instance and make it available, and verify all data is available or not..??


______________________________________________________________________________________

D: 14/05/2020

Snapshots: Backup copy of our ebs volumes.. 

--> Backup of EBS
--> If you need multiple copies of your ebs volume.
--> If you want to create same volume for another AZ instance, we use snapshot.
--> If you want to create same volume for another Region instance, we use snapshot.
--> If you want to create share volume to another AWS Account, we use snapshot.
--> We can make this volume publicly avilable using snapshot.

--> Snapshots are point-in-recovery copies. 


DLM : Data LifeCyle Manager : AUtomate the snapshot process: 

Project : SAP 

Infinity Days.. 


IIS Path for Index.html file:  C:\inetpub\wwwroot


Security Group we have associated for our webserver, it must be open with http, then only we can deliver the webpage.. 

Security groups contains Inbound rules and outbound rules.. 

--> Security groups are stateful.. We need to takes care inbound rules only always..
--> Changes to the SG, takes effect immediately.

Inbound : Data out from ec2 instance.. Data delivering from ec2 instance.. 
Outbound : Data into ec2 instance.. 

Ec2 instance Outbound security group allows all the traffic.. (Universal accepter)


http	: 80
https 	: 443
ssh 	: 22
RDP 	: 3389
MSSQL 	: 1433
MYSQL 	: 3306


Task : Launch an ec2 instance, make it as a webserver installing IIS and deliver your custom webpage to everyone.

Task 2 : Launch an ec2 instance in ap-south-1a, another instance in ap-south-1b.. Create a volume and attach it to "ap-south-1a" instance and add some data.... Now, the data needs to avilable to "ap-south-1b" instance.. How can you achive it.??

Task 3 : Create a DLM with proper tags, to take snapshots for every 1 hours, at 10:00 AM,
 Retention should be only 2 copies. 


________________________________________________________________________________________

D: 15/05/2020

EIP : 
ENI : 

MyAMI / CustomAMI / GoldenAMI : 


Ec2 instance : Web Server installing IIS.. 


Windows SG : 3389(RDP), 80, 443 (http & Https)
Linux SG : 22 (SSH), 80, 443 (http & Https)

bigdata-v1-sg
bigdata-ws-sg
sap-prod-sg
sap-nonprod-sg


When we stop/start the ec2 instance, Public IP address changes.

EIP : Elastic IP Address : Dedicated IP address for our AWS Resources.. We can map to ec2 instance NIC cards. (NO FREE TIER ELIGIBLE)

ENI : Elastic Network Interface : (NIC for our ec2 instances) : Multiple NIC cards for our ec2 instance.. 



Ticket :  We need 10 ec2 instance, Install IIS, Set custom WP, Install Putty, Custom Password, Additional user (RDP)


1 instance = configure with all required settings --> Make an "AMI"

Recommeded: Stop the ec2 instance...


CustomAMI / Golden AMI : 
--> If you need instances with specific standards / custom settings, we use goldenAMI.
--> If you want to copy an instance from one region to another region.
--> If you want to share your instance with another AWS acocunt user.
--> If you wasn to make your customized settings for public.. 
 
--> We cannot share encrypted AMIs/Snapshots.. 


Task : Ping an ec2 instance.

Task 2 : Create a GoldenAMI with IIS, Custome user and custom application.

________________________________________________________________________________________

D: 16/05/2020

Linux is OpenSource OS.

Amazon : Amazon Linux 2 / Amazon Linux.. 

Fedora: Amazon Linux, CentOS, Redhat..

Linux : SSH : 22 : 

Tools to connect to Linux Instance : 
--> Putty
--> Windows Command Prompt (Enable OpenSSH)
--> Install GIT, Use GIT Bash		(https://git-scm.com/download/win)
--> MobaXterm

Putty Don't supports .pem format file, We needs to convert .pem to .ppk (Putty Private Key).. We required "PuttyGen" for convertion.
.pem	--> .ppk

CMD / GIT / Terminal: ssh -i "Key pair.pem" ec2-user@PublicIP

Linux : Terminal : Bad Permissions / Permission too open :  chmod 400 keypair.pem 


whoami 		: gives us currently working user information.
sudo su		: To switch to root user
yum update -y	: TO update your instance with latest patches.

yum install httpd -y	: COmmand to install Apache webserver.

service httpd status			: To know the apche service status
service httpd start / stop / restart	: To start the service

chkconfig httpd on			: To make Apache service as Logon automatically
					  Start the Apache automatically

Content path : /var/www/html/ 

pwd		: Print Working Directory (tells you where exactly you are)
cd 		: Change directory
cd /var/www/html/	

Editors : Nano, vi, vim..

VIM EDITOR : 

vim filename	vim index.html

I 	--> To goto Insert Mode
Esc	--> To comeout from Insert mode
:wq	--> To Write the Data and Quit the editor
:q!	--> Quit without writing the data



https://join.slack.com/t/awswithavinash/shared_invite/zt-ee98fole-ThLu2xoWAVtUhhvoQPl~bA


_________________________________________________________________________________________

D: 18/05/2020

Terminal :  ssh -i keypair.pem ec2-user@publicip

Volumes : 

lsblk 		: List blockbased devices / Attached volumes.
df -Th		: List the volumes which is in available state.

/dev/xvda1 : 8GB volume
/dev/xvdf  : 2GB volume

Linux file systems : ext3, ext4, xfs, nfs.. : xfs

Create a File system in 2G volume: 

mkfs -t xfs /dev/xvdf
mount /dev/xvdf /newvolume

Make it permanenet mount by adding an entry in "/etc/fstab" file.

cat /etc/mtab : get entry related to /dev/xvdf

/dev/xvdf /home/ec2-user/newvolume xfs rw,relatime,attr2,inode64,noquota 0 0



Task : Launch a Linux ec2 instance, make it as a webserver by installing "Apache".

Task 2 : Launch a linuc ec2 instance, make it as a webserver by installing "nginx".

Task 3 : Launch instance in "1a", Create an Additional volume "1 Gb", and attach it and make it available permanently(add entry in fstab).. Reboot the instance and confirm..

Task 4 : VOlume from Task 3.. Launch an ec2 instance in "1b",  get same volume from "task 3" and make it avilable for "1b" instance.

Task 5 : Launch a Linux ec2 instance.. Make it as a webserver.. And create an Image, and test the output from newly launched ec2 instance.

Task 6 : Can we login to an ec2 instance without a Keypair..?? and How to..?? (R & D)

_______________________________________________________________________________________

D: 19/05/2020

Cloudwatch : Monitoring Service on our aws resources.

Basic Monitoring : 5 Min Interval 
Detailed Monitoring 
/ Enhanced Monitoring(RDS) : 1 Min Interval 

Using CW, What resources we can monitor : 
--> CPU (CPU Utilization, CPU credit usage/balance) 
--> Network  (network in/out . Network pockets in/out)
--> Disk usage (Disk reads and disk writes, read /write operations)
--> Status checks (System SC/ Instance SC)

Memory /RAM : We cannot monitor Memory utilisation using CW default metrics.
Storage : WE cannot monitor storage information also. 

We need to create a Custom Cloudwatch Metrics to monitor MEmory / Storage limit. We need to deploy a cloudwatch agent.. That agent collects all the information and sends to AWS CW Metric.

When CPU utilisation is  >=90% for 5 Min.. Take this action : 
when cpu usage is <=10% for 5 min.. Take this action : 

To CUstomise the Ec2 instance notifications: 
___________________________
INPUT PATH:

{"instance-id":"$.detail.instance-id", "state":"$.detail.state", "time":"$.time", "region":"$.region", "account":"$.account"}

INPUT TEMPLATE: 

"At <time>, Status of your EC2 instance <instance-id> in the AWS Region <region> has changed to <state>."

_____________________________


Task : When instance is stopped get a custom notification to your email id.

Task 2 : COnfigure s3 bucket notificaiton, if an object is deleted, get a notification to you email is.

Task 3 : COnfigure alarm on your ec2 instance to terminate the instance, if CU utilisation is <=30 % for 10 Minutes.


________________________________________________________________________________________

D: 20/05/2020

ELB : 

Executed only once, when instance is launched for the first time : 

#!/bin/bash
yum update -y
yum install httpd -y
service httpd start
chkconfig httpd on
echo "<h1>This is a ap-south-1b webpage</h1>" >> /var/www/html/index.html

3 TYpes of ELBs available :

--> Classic ELB : http, https, tcp..
--> Application ELB : Http & https
--> Network ELB : tcp, udp, ssl, tls.. 

Classic ELB : 
Name : Name of ELB
Create an internal load balancer: No (As i want to test output from outer networks)
Enable advanced VPC configuration: Enables

On what port, you w ant to run your instance / elb.

--> For ELB, We don't get any IP address, We'll get DNS name.
--> using DNS name, we can access the app. 


Logs on ELB : AccessLogs : We stores in an S3 bucket.. 

Cross-Zone Load Balancing : 



Task : Launch multiple ec2 instance in Multiple AZs.. and configure Classic ELB. 

Task 2 : COnfigure the SG settings as we discussed.

Task 3 : Use the Userdata to Make your instance as webserver.

_________________________________________________________________________________________

D: 22/05/2020

ALB : Application Elastic Load Balancer : http and https protocols.. 

We use Target Groups.. 

Freetier : 750 Hours / Month.. 1 ELB = 1 Month

http: 80
https: 443

After creating Target group, We cannot modify target type. 
Target type : 
--> Instance
--> IP

--> network ELB, Have a feature, We can associate EIP.
--> Network ELB, works with "Flow Hash Algorithm"

_________________________________________________________________________________________

D: 23/05/2020

ASG : Auto Scaling Group : 


ScaleIn : Removing
ScaleOut : Adding resource


1. Create an AMI
2. Launch an ELB (Don't add any resources)
3. Create an ASG
	3.1 Create Launch COnfiguration (Template)
	3.2 Create ASG (When scaleIn & ScaleOut)


Task : Create an ASG with Apache/Nginx..!!

_______________________________________________________________________________________

D: 25/05/2020


#!/bin/bash	--> Linux

<script></script>
<powershell></powershell>


Works with only Windows insatnce : 
<persist>true</persist>

<powershell>
tzutil /s "India Standard Time"
</powershell>

<script>
echo Current time and date >> %SystemRoot%\Temp\reboot.log
echo %TIME% %DATE% >> %SystemRoot%\Temp\reboot.log
</script>
<persist>true</persist>


<powershell>
echo "Current time and date" >> C:\reboot.log
echo %TIME% %DATE% >> C:\reboot.log
</powershell>
<persist>true</persist>


curl http://169.254.169.254/latest/user-data


Metadata: Data about the data.. 

Windows : http://169.254.169.254/latest/meta-data/
Linux : curl http://169.254.169.254/latest/meta-data/

ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
events/
hibernation/
hostname
identity-credentials/
instance-action
instance-id
instance-type
local-hostname
local-ipv4
mac
metrics/
network/
placement/
profile
public-hostname
public-ipv4
public-keys/
reservation-id
security-groups
services/


AWS CLI:
_________

https://aws.amazon.com/cli/

IAM User creation : 
--> AWS management console: Browser
--> Programatic access : cli : AccesskeyID and SecretAccessKey

Open "cmd"
aws configure
enter the AccesskeyID
enter the SecretAccessKey
enter the region (none)
none with default outut : 

aws --> Command to point aws env

aws <service name> : aws s3 : aws ec2 : aws iam : aws kms

s3: 
aws s3 ls
aws s3 ls s3://bucketname
aws s3 cp <source> <destination>
aws s3 sync <source> <destination>
aws s3 mb / rb
aws s3 presign


We use Roles over the CLI option.

Task 1 : Launch an ec2 instance using CLI.  .. Terminate using cli.
Task 2 : Create a Sync between your local folder and an s3 bucket. THis sync should execute every 1 hour.
Task 3 : Generate some Presign URL to expire after 60 sec..
Task 4 : Create an IAM user using cli and add that user to a group.

________________________________________________________________________________________

D: 26/05/2020

Roles : 

--> Roles easy to manage
--> We always prefer to use roles.
--> While creating role, whatever the policy we associate, based on that policy, Instance will get access on the aws resources.
--> We can attach Role/Detach/change role at any time. 
--> When we are using roles, instance won't store accesskeyID and SecretAccess key.

--> We can use toles to share our aws acc resources to another AWS acc users also.


EFS : Elastic File System
_________________________

--> EFS works with NFS protocol (network File System) v4.1
--> We can use EFS with only Linux Instances.
--> No Pre-Provisioning required.
--> Manages permissions at instane OS level.


Windows OS : For windows we have a service FSx. 
--> FSx works with SMB protocol.
--> it supports Active Directory authentication also.


/var/www/html/

sudo mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport fs-a4f97875.efs.ap-south-1.amazonaws.com:/ /var/www/html/

cat /etc/mtab	

fs-a4f97875.efs.ap-south-1.amazonaws.com:/ /var/www/html nfs4 rw,relatime,vers=4.1,rsize=1048576,wsize=1048576,namlen=255,hard,noresvport,proto=tcp,timeo=600,retrans=2,sec=sys,clientaddr=172.31.12.15,local_lock=none,addr=172.31.5.39 0 0

vim /etc/fstab



Task : Create an Index.html and upload it to an s3 bucket... While launching an ec2 instance, use userdata and get the index.html file from s3 bucket to web server public doc path.

Task 2: Create a role (s3 readonly) and associate a role with an ec2 instance and test the s3 access from ec2 instance.

Task 3 : Provide S3Fullaccess for task2 created role using Inline policy.

Task 4 : Create Multiple Linux instance, Create an EFS and mount efs to both the instances webserver path and deliver same data from both the instances.
--> Design SG as we discussed.

Task 5 : Launch a new Linux insatnce, while launching Associate the EFS we created. 


_______________________________________________________________________________________

D: 27/05/2020

Lightsail : 

Elastic Beanstalk : PaaS : We have preConfigured platforms.. Based on our req, we can create and manage platforms with simple clicks.. All we need to do is Upload the code.. 

--> One org, their main focus is on Application development, not on Infra provisioning and  management.. Based on load Infra should scale automatically.. What is the best application.. 


AWS Systems Manager : "SSM role"

300 Instance --> We need to have a "role"
Using "TAGS" we can filter the instances.. 

Application : SAP/bigData/Php/java
Platform : Linux / Windows
Cost Centre : ASDFGA

Resource Group : --> FIlter all Linux ==> LinuxRG
		 --> FIlter all Win ==> WindowsRG

100 linux instance : --> One critical security patch 
200 Windows instances : 

If we lost keypair of a windows instance..?


Linux
Windows

#!/bin/bash
yum udpate -y
yum insatll httpd -y
service httpd start


Task : Install Putty application in 2 windows instances using "System manager"..

Task 2 : Make an ec2 instance a webserver using run command option. 










































































































